LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
games
Games
colnames(Games)
rownames(Games)
Games["LeBronJames", "2012"]
FieldGoals
round(FieldGoals / Games, 1)
round(MinutesPlayed / Games,1)
round(MinutesPlayed / Games)
?matplot
FieldGoals
t(FieldGoals)
t(FieldGoals)
matplot(t(FieldGoals))
matplot(t(FieldGoals))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(FieldGoals / Games)
matplot(t(FieldGoals / Games), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
x <- c("a", "b", "c", "d", "e")
x
x[c(1,5)]
x[1]
Games
Games[1:3,6:10]
Games[c(1,10),]
Games[ , c("2008", "2009")]
Games[1,]
Games[1,]
is.matrix(Games[1,])
is.vector(Games[1,])
Games[1,5]
Games[1, , drop=F]
Games[1,5, drop=F]
atplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1:3,]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data
Data <- MinutesPlayed[1:3,]
Data
t(Data)
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(Data)
Data
myplot <- function(){
MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot <- function(){
MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2:3,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1:5)
myplot(1:10)
myplot(1:10)
myplot <- function(data,rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:10)
myplot(Salary,1:10)
myplot(Salary,1:2)
myplot <- function(data,rows=1:10){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
myplot(Salary / Games)
#In-game metrics
myplot(MinutesPlayed)
myplot(Points)
#In-game metrics normalized (exclude effect of injuries)
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
#interesting observations
myplot(MinutesPlayed / Games)
myplot(Games)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Player Style
myplot(Points/FieldGoals)
#Matrix
#
# <put your code here>
#
?rbind()
?rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rownames(free.throws)
colnames(free.throws)
colnames(free.throws) <- Seasons
free.throws
rm(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
#Matrix
#
# <put your code here>
#
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
free.throws
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
free.throws.attemps <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
colnames(free.throws.attemps) <- Seasons
free.throws.attemps
rm(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
myplot(free.throws.attemps / Games)
myplot(free.throws / free.throws.attemps)
field.points <- Points - free.throws
myplot(field.points/FieldGoals)
myplot(field.points/FieldGoals)
rownames(free.throws) <- Players
free.throws
rownames(free.throws.attemps) <- Players
free.throws.attemps
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#----------------2. Aesthetics
library(ggplot2)
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
str(movies)
summary(movies)
head(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating",
"AudienceRating", "BudgetMillions",
"Year")
head(movies)
tail(movies)
str(movies)
summary(movies)
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
str(movies)
#----------------2. Aesthetics
library(ggplot2)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating))
#the above ggplot doesn't show any data, so we need to add geometry (3rd layer)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
#add colour
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) +
geom_point()
#add size
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions)) +
geom_point()
#------------Plotting with layers
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
#point
p + geom_point()
#lines
p + geom_line()
#multiple layers
p + geom_point() + geom_line()
p + geom_line() + geom_point()
p + geom_boxplot()
#---------------Overriding Aesthetics
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#add geom layer
q + geom_point()
#overriding aes
#ex1
q +geom_point(aes(size = CriticRating))
#ex2
q + geom_point(aes(colour = BudgetMillions))
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
#ex4
q + geom_line() + geom_point()
#reduce line sizes
q + geom_line(size=1) + geom_point()
#----------1. Data (layer)
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
setwd("/home/sonia/desktop/R")
setwd("C://home/sonia/desktop/R")
g
#Load data
getwd()
setwd("/home/sonia/Desktop/Workshop")
getwd()
data <- read.csv("6-Exercice World Trends-Data.csv")
data
#check import
head(data)
#check import
head(data,5)
#check import
head(data,10)
#check import
Head(data,10)
#check import
head(data,10)
#check import
head(data)
tail(data)
str(data)
summary(data)
#split the data into 2 data frames: 1 for each year (1960 and 2013)
data1960 <- data[data$Year == 1960]
#split the data into 2 data frames: 1 for each year (1960 and 2013)
data$Year == 1960
data1960 <- data[data$Year == 1960,]
data[data$Year == 1960,]
data2013 <- data[data$Year == 2013,]
#check row count
nrow(data1960)
nrow(data2013)
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
#create the additional data frames (1st open the vector file and run it)
add1960 <- data.frame(Country = Country_Code, Life expectancy = Life_Expectancy_At_Birth_1960)
#create the additional data frames (1st open the vector file and run it)
add1960 <- data.frame(Country = Country_Code, Life.exp = Life_Expectancy_At_Birth_1960)
add2013 <- data.frame(Country = Country_Code, Life.exp = Life_Expectancy_At_Birth_2013)
#check summaries
summary(add1960)
summary(2013)
summary(add2013)
add1960 <- data.frame(Code = Country_Code, Life.exp = Life_Expectancy_At_Birth_1960)
add2013 <- data.frame(Code = Country_Code, Life.exp = Life_Expectancy_At_Birth_2013)
#check summaries
summary(add1960)
summary(add2013)
#merge the pairs of data frames
merged1960 <- merge(data1960, add1960, by.x="Country_Code", by.y="Code")
#merge the pairs of data frames
merged1960 <- merge(data1960, add1960, by.x="Country.Code", by.y="Code")
merged2013 <- merge(data2013, add2013, by.x="Country.Code", by.y="Code")
#check the new merged data frames structures
str(merged1960)
str(merged2013)
#delete columns: as we have a data set per year, we don't need the year column anymore
merged1960$Year <- NULL
merged2013 <- NULL
merged2013 <- merge(data2013, add2013, by.x="Country.Code", by.y="Code")
merged2013$Year <- NULL
#visualisation
library(ggplot2)
#visualise the 1960 data
qplot(data=merged1960, x=Fertility.Rate, y=Life.Exp, colour=Region)
#visualise the 1960 data
qplot(data=merged1960, x=Fertility.Rate, y=Life.exp, colour=Region)
qplot(data=merged1960, x=Fertility.Rate, y=Life.exp,
colour=Region, size=I(5), alpha=I(0.6),
main="Life Expecatncy vs. Fertility (1960)")
qplot(data=merged2013, x=Fertility.Rate, y=Life.exp,
colour=Region, size=I(5), alpha=I(0.6),
main="Life Expecatncy vs. Fertility (2013)")
qplot(data=merged1960, x=Fertility.Rate, y=Life.exp,
colour=Region, size=I(5), alpha=I(0.6),
main="Life Expectancy vs. Fertility (1960)")
qplot(data=merged2013, x=Fertility.Rate, y=Life.exp,
colour=Region, size=I(5), alpha=I(0.6),
main="Life Expectancy vs. Fertility (2013)")
merged1960$Year
merged1960
#check the new merged data frames structures
str(merged1960)
#import the data
getwd()
movie <- read.csv("7- Movie domestic gross.csv")
movie <- read.csv("7- Movie domestic gross.csv")
#check data
head(movie)
summary(movie)
str(mov)
str(mov)
str(movie)
#activate ggplot2
#install.packages("ggplot2")
library(ggplot2)
#additional insight
ggplot(data = movie, aes(x=Day.of.Week)) + geom_bar()
#filter for the data frame
filt <- movie$Genre == "action"
movie2 <- movie[filt,]
movie2
#filter for the data frame
filt <- movie$Genre == "action" | movie$Genre == "adventure" | movie$Genre == "animation" | movie$Genre == "comedy" | movie$Genre == "drama"
movie2 <- movie[filt,]
movie2
#filter on Studio
filt2 <- movie$Studio %in% c("Buena Vista Studios", "WB", "Fox", "Universal", "Sony", "Paramount Pictures")
movie2 <- movie[filt & filt2,]
movie2
p <- ggplot(data = movie2, aes(x = Genre, y = Gross...US))
#add geometries
p + geom_point()
#add geometries
p + geom_boxplot()
p +
geom_jitter() +
geom_boxplot()
#add geometries
p +
geom_jitter() +
geom_boxplot(alpha = 0.7)
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7)
#add geometries
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q <- q +
xlab("Genre") +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre")
q <- p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q <- q +
xlab("Genre") +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre")
q
q <- < +
theme(
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 40),
legend.title = element_text(size = 20)
)
q
q <- < +
theme(
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 40),
legend.title = element_text(size = 20)
text = element_text(family = "Comic Sans MS")
)
q
#Final touch
q$label$size <- "Budget $M"
#Final touch
q$label$size <- "Budget $M"
q
install.packages("extrafont")
library(extrafont)
q <- < +
theme(
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 40),
legend.title = element_text(size = 20)
text = element_text(family = "Comic Sans MS")
)
q
getwd()
setwd("/home/sonia/Desktop/R")
movies <- read.csv("Section6-Homework-Data.csv")
summary(movies)
str(movies)
colnames(movies)
head(movies)
studioFilter <- (movies$Studio == "Buena Vista Studios")| (movies$Studio == "Fox") | (movies$Studio == "Paramount Pictures") |
(movies$Studio == "Sony") | (movies$Studio == "Universal")| (movies$Studio == "WB")
genreFilter <- movies$Genre == "action" | movies$Genre == "adventure" |
movies$Genre == "animation" | movies$Genre == "comedy" | movies$Genre == "drama"
filteredMovies <- movies[studioFilter & genreFilter, ]
summary(filteredMovies)
#install ggplot2
#install.packages("ggplot2)
library(ggplot2)
install.packages("extrafont")
library(extrafont)
a <- ggplot(data = filteredMovies, aes(x = Genre, y = Gross...US))
a
q <- a + geom_jitter(aes(colour = Studio, size = Budget...mill.)) + geom_boxplot(alpha = 0.6, outlier.color = NA) +
ylab("Gross % US") +
ggtitle("Domestic Gross % by Genre") +
theme(axis.title.x = element_text(size = 30, colour = "DarkBlue"),
axis.title.y = element_text(size = 30, colour = "DarkBlue"),
axis.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 40),
legend.title = element_text(size = 20),
legend.text = element_text(size = 20),
text = element_text(family="Comic Sans MS"))
q
#change the title of the legend
q$label$size <- "Budget $M"
install.packages("extrafont")
q <- < +
theme(
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
plot.title = element_text(hjust = 0.5,size = 40),
legend.title = element_text(size = 20)
text = element_text(family = "Comic Sans MS")
)
q
