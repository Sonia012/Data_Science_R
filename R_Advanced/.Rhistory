DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
games
Games
colnames(Games)
rownames(Games)
Games["LeBronJames", "2012"]
FieldGoals
round(FieldGoals / Games, 1)
round(MinutesPlayed / Games,1)
round(MinutesPlayed / Games)
?matplot
FieldGoals
t(FieldGoals)
t(FieldGoals)
matplot(t(FieldGoals))
matplot(t(FieldGoals))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(FieldGoals / Games)
matplot(t(FieldGoals / Games), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
x <- c("a", "b", "c", "d", "e")
x
x[c(1,5)]
x[1]
Games
Games[1:3,6:10]
Games[c(1,10),]
Games[ , c("2008", "2009")]
Games[1,]
Games[1,]
is.matrix(Games[1,])
is.vector(Games[1,])
Games[1,5]
Games[1, , drop=F]
Games[1,5, drop=F]
atplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1:3,]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data
Data <- MinutesPlayed[1:3,]
Data
t(Data)
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(Data)
Data
myplot <- function(){
MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot <- function(){
MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2:3,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1:5)
myplot(1:10)
myplot(1:10)
myplot <- function(data,rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:10)
myplot(Salary,1:10)
myplot(Salary,1:2)
myplot <- function(data,rows=1:10){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
myplot(Salary / Games)
#In-game metrics
myplot(MinutesPlayed)
myplot(Points)
#In-game metrics normalized (exclude effect of injuries)
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
#interesting observations
myplot(MinutesPlayed / Games)
myplot(Games)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Player Style
myplot(Points/FieldGoals)
#Matrix
#
# <put your code here>
#
?rbind()
?rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rownames(free.throws)
colnames(free.throws)
colnames(free.throws) <- Seasons
free.throws
rm(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
#Matrix
#
# <put your code here>
#
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
free.throws
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
free.throws.attemps <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
colnames(free.throws.attemps) <- Seasons
free.throws.attemps
rm(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
myplot(free.throws.attemps / Games)
myplot(free.throws / free.throws.attemps)
field.points <- Points - free.throws
myplot(field.points/FieldGoals)
myplot(field.points/FieldGoals)
rownames(free.throws) <- Players
free.throws
rownames(free.throws.attemps) <- Players
free.throws.attemps
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#----------------2. Aesthetics
library(ggplot2)
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
str(movies)
summary(movies)
head(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating",
"AudienceRating", "BudgetMillions",
"Year")
head(movies)
tail(movies)
str(movies)
summary(movies)
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
str(movies)
#----------------2. Aesthetics
library(ggplot2)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating))
#the above ggplot doesn't show any data, so we need to add geometry (3rd layer)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
#add colour
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) +
geom_point()
#add size
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions)) +
geom_point()
#------------Plotting with layers
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
#point
p + geom_point()
#lines
p + geom_line()
#multiple layers
p + geom_point() + geom_line()
p + geom_line() + geom_point()
p + geom_boxplot()
#---------------Overriding Aesthetics
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#add geom layer
q + geom_point()
#overriding aes
#ex1
q +geom_point(aes(size = CriticRating))
#ex2
q + geom_point(aes(colour = BudgetMillions))
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
#ex4
q + geom_line() + geom_point()
#reduce line sizes
q + geom_line(size=1) + geom_point()
#----------1. Data (layer)
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
setwd("/home/sonia/desktop/R")
setwd("C://home/sonia/desktop/R")
# check and set working directory
getwd()
setwd("/home/sonia/Desktop/R/R_Advanced")
getwd()
#omport the data (csv file) and check the data
#Basic: fin <- read.csv("P3-Future-500-The-Dataset.csv")
# na.strings function will replace all the values in the vector (c()) with <NA>'s
fin <- read.csv("P3-Future-500-The-Dataset.csv", na.strings = c(""))
fin
head(fin, 20)
tail(fin, 10)
str(fin)
summary(fin)
#Changing from non-)factor to factor:
fin$ID <- factor(fin$ID)
summary(fin)
str(fin)
fin$Inception <- factor(fin$Inception)
summary(fin)
str(fin)
#Converting into Numerics: for characters:
a <- c("12", "13", "14", "12", "12")
a
typeof(a)
b <- as.numeric(a)
b
typeof(b)
#Converting into Numerics: for factors:
#Factor Variable Trap (FVT) if you convert a factor into a non-factor variable
z <- factor(c("12", "13", "14", "12", "12"))
z
typeof(z) #it's not the values inside z that are viewed as integers but it's the factorization that's viewed as integer!
#R assigns numerical values to each category => when we look at vector z, WE see 12, 13, 14, 12, 12, when R looks at it,
#it sees 1 2 3 1 1
y <- as.numeric(z)
y
typeof(y)
#although y is a type "double", the values (1 2 3 1 1) are not the values we expected => Factor Variable Trap!
#How should we convert a factor variable, then??
#Correct way = first convert z into a character and then convert into a number
x <- as.numeric(as.character(z))
x
typeof(x)
# to convert factors to numbers, the format needs to be right. If there are commas, dollar signs, words, percentage signs,... they need to be replaced first!
# sub() and gsub()
fin$Expenses <- gsub(" Dollars", "", fin$Expenses)
fin$Expenses <- gsub(",", "", fin$Expenses)
head(fin)
str(fin)
fin$Revenue <- gsub("\\$", "", fin$Revenue)
fin$Revenue <- gsub(",", "", fin$Revenue)
str(fin)
fin$Growth <- gsub("%","",fin$Growth)
head(fin)
fin$Expenses <- as.numeric(fin$Expenses)
fin$Revenue <- as.numeric(fin$Revenue)
fin$Growth <- as.numeric(fin$Growth)
str(fin)
summary(fin)
# What is an NA?
?NA
#Locating missing data
head(fin,24)
#pull out the rows with missing data
fin[!complete.cases(fin),]
#Filtering: using which() for non-missing data
head(fin)
#let's say we want to single out the row(s) with a revenue of 9746272
fin[fin$Revenue == 9746272,]
#If there are NA's in the Revenue column, R will replace the whole row with NA and show it in your filter, as R doesn't know what to do with it
#How to solve this?
#Use which()
which(fin$Revenue == 9746272)
#which() goes through the vector (fin$Revenue == 9746272) and takes only the "TRUE" rows => not the False and not the NA
#it returns the number (ID) of the row that you need = row number 3
fin[which(fin$Revenue == 9746272),]
head(fin)
which(fin$Employees == 45)
fin[which(fin$Employees == 45),]
#Filtering: using is.na() for missing data
head(fin, 24)
#Filtering: using is.na() for missing data
head(fin, 24)
is.na(fin$Expenses)
fin[is.na(fin$Expenses),]
is.na(fin$State)
fin[is.na(fin$State),]
fin_backup <- fin
complete.cases(fin)
!complete.cases(fin)
fin[!complete.cases(fin),]
fin[is.na(fin$Industry),]
fin[!is.na(fin$Industry),]
fin <- fin[!is.na(fin$Industry),]
fin[!complete.cases(fin),]
rownames(fin)
rownames(fin) <- 1:nrow(fin)
fin
tail(fin)
fin <- fin_backup
fin[!complete.cases(fin),] #will give you all the rows with missing values
fin[is.na(fin$Industry),] #will give you the rows with NA's in the Industry column
fin[!is.na(fin$Industry),] #will give you all the rows that don't have NA's in the Industry column
fin <- fin[!is.na(fin$Industry),] #will replace the data (fin) with the data without the rows that have NA in the Industry column => there are no more NA's in the Industry column
fin[!complete.cases(fin),]
tail(fin)
#better solution:
rownames(fin) <- NULL
tail(fin)
fin[is.na(fin$State),]
fin[is.na(fin$State) && fin$City == "New York",]
fin[is.na(fin$State) & fin$City == "New York",]
fin[is.na(fin$Sate) & fin$City == "New York", fin$State] <- "NY"
fin[is.na(fin$State) & fin$City == "New York", fin$State] <- "NY"
fin[is.na(fin$State) & fin$City == "New York", "State"] <- "NY"
#check
fin[c(11, 377),]
fin[!complete.cases(fin),]
fin[is.na(fin$State) & fin$City == "San Francisco",]
fin[is.na(fin$State) & fin$City == "San Francisco", "State"] <- "CA"
#check
fin[c(11, 377, 82, 265),]
fin[!complete.cases(fin),]
#Replacing missing data: Median imputation method
fin[fin$Undustry == "Retail",]
#Replacing missing data: Median imputation method
fin[fin$Industry == "Retail",]
median(fin[fin$Industry == "Retail","Employees"], na.rm = TRUE) #remove the NA so they don't screw up your median
med_empl_retail <- median(fin[fin$Industry == "Retail","Employees"], na.rm = TRUE) #remove the NA so they don't screw up your median
med_empl_retail
fin[is.na(fin$Employees) & fin$Industry == "Retail",]
fin[is.na(fin$Employees) & fin$Industry == "Retail", "Employees"] <- med_empl_retail
#check
fin[3,]
med_empl_FinServ <- median(fin[fin$Industry == "Financial Services", "Employees"], na.rm = TRUE)
med_empl_FinServ
fin[is.na(fin$Employees) & fin$Industry == "Financial Services",]
fin[is.na(fin$Employees) & fin$Industry == "Financial Services", "Employees"] <- med_empl_FinServ
#check
fin[3, 330]
#check
fin[c(3, 330),]
fin[!complete.cases(fin),]
med_growth_construction <- median(fin[fin$Industry == "Construction", "Growth"], na.rm = TRUE)
med_growth_construction
fin[is.na(fin$Growth) & fin$Industry == "Construction",]
fin[is.na(fin$Growth) & fin$Industry == "Construction", "Growth"] <- med_growth_construction
fin[8,]
fin[!complete.cases(fin),]
med_rev_construction <- median(fin[fin$Industry == "Construction", "Revenue"], na.rm = TRUE)
med_rev_construction
fin[is.na(fin$Revenue) & fin$Industry == "Construction",]
fin[is.na(fin$Revenue) & fin$Industry == "Construction", "Revenue"] <- med_rev_construction
fin[c(8, 42),]
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
med_exp_construction <- median(fin[fin$Industry == "Construction", "Expenses"], na.rm = TRUE)
med_exp_construction
fin[is.na(fin$Expenses) & fin$Industry == "Construction",]
fin[is.na(fin$Expenses) & fin$Industry == "Construction", "Expenses"] <- med_exp_construction
fin[c(8,42),]
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
fin[is.na(fin$Profit),]
fin[is.na(fin$Profit), "Profit"] <- fin[is.na(fin$Profit), "Revenue"] - fin[is.na(fin$Profit), "Expenses"]
fin[c(8, 42),]
fin[is.na(fin$Expenses),]
fin[is.na(fin$Expenses), "Expenses"] <- fin[is.na(fin$Expenses), "Revenue"] - fin[is.na(fin$Expenses), "Profit"]
fin[15]
fin[15,]
fin[!complete.cases(fin)]
fin[!complete.cases(fin),]
#Visualization:
library(ggplot2)
#A scatterplot classified by industry showing revenue, expenses, profit
#A scatterplot that includes industry trends for the expenses-revenue relationship
#Boxplots showing growth by industry
p <- ggplot(data=fin)
p
p + geom_point(aes(x=Revenue, y=Expenses))
p + geom_point(aes(x=Revenue, y=Expenses, colour=Industry))
p + geom_point(aes(x=Revenue, y=Expenses, colour=Industry, size=Profit))
#A scatterplot that includes industry trends for the expenses-revenue relationship
p + geom_point(aes(x=Revenue, y=Expenses, colour=Industry))
#A scatterplot that includes industry trends for the expenses-revenue relationship
d <- ggplot(data=fin, aes(x=Revenue, y=Expenses, colour=Industry))
d + geom_point() + geom_smooth(fill=NA, size=1.2)
d + geom_point() + geom_smooth()
d + geom_point() + geom_smooth(fill=NA, size=1.2)
#A scatterplot that includes industry trends for the expenses-revenue relationship
d <- ggplot(data=fin, aes(x=Revenue, y=Expenses, colour=Industry))
d + geom_point() + geom_smooth(fill=NA, size=1.2)
d + geom_point() + geom_smooth(size=1.2)
d + geom_point() + geom_smooth(fill=NA, size=1.2)
#Boxplots showing growth by industry
f <- ggplot(data=fin, aes(x=Industry, y=Growth, colour=Industry))
f + geom_boxplot()
f + geom_jitter() + geom_boxplot()
f + geom_jitter() + geom_boxplot(size=1, alpha=0.5,outlier.colour=NA)
getwd()
util <- read.csv("P3-Machine-Utilization.csv")
head(util, 12)
str(util)
summary(util)
util$Utilization <- 1 - util$Percent.Idle
head(util, 12)
#Handling date-times in R
?POSIXct
as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")  #Capital Y because it's 4 digits
util$PosixTime <- as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")  #Capital Y because it's 4 digits
head(util, 12)
summary(util)
head(util, 12)
head(util, 12)
util <- util[,c(4, 1, 2, 3)]
head(util, 12)
getwd()
util <- read.csv("P3-Machine-Utilization.csv")
head(util, 12)
str(util)
summary(util)
util$Utilization <- 1 - util$Percent.Idle
head(util, 12)
#Handling date-times in R
?POSIXct
util$PosixTime <- as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")  #Capital Y because it's 4 digits
head(util, 12)
summary(util)
#TIP: how to rearrange columns in a data frame?
util$Timestamp <- NULL
head(util, 12)
util <- util[,c(4, 1, 2, 3)]
head(util, 12)
