KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
games
Games
colnames(Games)
rownames(Games)
Games["LeBronJames", "2012"]
FieldGoals
round(FieldGoals / Games, 1)
round(MinutesPlayed / Games,1)
round(MinutesPlayed / Games)
?matplot
FieldGoals
t(FieldGoals)
t(FieldGoals)
matplot(t(FieldGoals))
matplot(t(FieldGoals))
matplot(t(FieldGoals), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(FieldGoals / Games)
matplot(t(FieldGoals / Games), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
x <- c("a", "b", "c", "d", "e")
x
x[c(1,5)]
x[1]
Games
Games[1:3,6:10]
Games[c(1,10),]
Games[ , c("2008", "2009")]
Games[1,]
Games[1,]
is.matrix(Games[1,])
is.vector(Games[1,])
Games[1,5]
Games[1, , drop=F]
Games[1,5, drop=F]
atplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
matplot(t(MinutesPlayed), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1:3,]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data
Data <- MinutesPlayed[1:3,]
Data
t(Data)
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
t(Data)
Data
myplot <- function(){
MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot <- function(){
MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players, col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(){
Data <- MinutesPlayed[2:3,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[2:3], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot()
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1:5)
myplot(1:10)
myplot(1:10)
myplot <- function(data,rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:10)
myplot(Salary,1:10)
myplot(Salary,1:2)
myplot <- function(data,rows=1:10){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft", inset=0.01, legend=Players[rows], col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
#Salary
myplot(Salary)
myplot(Salary / Games)
#In-game metrics
myplot(MinutesPlayed)
myplot(Points)
#In-game metrics normalized (exclude effect of injuries)
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoalAttempts / Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts / Games)
#interesting observations
myplot(MinutesPlayed / Games)
myplot(Games)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Rime is valuable
myplot(FieldGoals/MinutesPlayed)
#Player Style
myplot(Points/FieldGoals)
#Matrix
#
# <put your code here>
#
?rbind()
?rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
rownames(free.throws)
colnames(free.throws)
colnames(free.throws) <- Seasons
free.throws
rm(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
#Matrix
#
# <put your code here>
#
free.throws <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT,
DwightHoward_FT, ChrisBosh_FT, ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT,
DwayneWade_FT)
free.throws
free.throws
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
free.throws.attemps <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
colnames(free.throws.attemps) <- Seasons
free.throws.attemps
rm(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA,
DwightHoward_FTA, ChrisBosh_FTA, ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA,
DwayneWade_FTA)
free.throws.attemps
myplot(free.throws.attemps / Games)
myplot(free.throws / free.throws.attemps)
field.points <- Points - free.throws
myplot(field.points/FieldGoals)
myplot(field.points/FieldGoals)
rownames(free.throws) <- Players
free.throws
rownames(free.throws.attemps) <- Players
free.throws.attemps
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#----------------2. Aesthetics
library(ggplot2)
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
str(movies)
summary(movies)
head(movies)
colnames(movies) <- c("Film", "Genre", "CriticRating",
"AudienceRating", "BudgetMillions",
"Year")
head(movies)
tail(movies)
str(movies)
summary(movies)
factor(movies$Year)
movies$Year <- factor(movies$Year)
summary(movies)
str(movies)
#----------------2. Aesthetics
library(ggplot2)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating))
#the above ggplot doesn't show any data, so we need to add geometry (3rd layer)
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
#add colour
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre)) +
geom_point()
#add size
ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions)) +
geom_point()
#------------Plotting with layers
p <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating, colour=Genre,
size=BudgetMillions))
#point
p + geom_point()
#lines
p + geom_line()
#multiple layers
p + geom_point() + geom_line()
p + geom_line() + geom_point()
p + geom_boxplot()
#---------------Overriding Aesthetics
q <- ggplot(data = movies, aes(x=CriticRating, y=AudienceRating,
colour=Genre, size=BudgetMillions))
#add geom layer
q + geom_point()
#overriding aes
#ex1
q +geom_point(aes(size = CriticRating))
#ex2
q + geom_point(aes(colour = BudgetMillions))
#ex3
q + geom_point(aes(x = BudgetMillions)) + xlab("BudgetMillions $$$")
#ex4
q + geom_line() + geom_point()
#reduce line sizes
q + geom_line(size=1) + geom_point()
#----------1. Data (layer)
getwd()
movies <- read.csv("P2-Movie-Ratings.csv")
setwd("/home/sonia/desktop/R")
setwd("C://home/sonia/desktop/R")
getwd()
#longer method to set working directory
#setwd("/home/sonia/Desktop/R/R_Advanced/Weather Data")
#shorter method to set wd => . (dot) means "current directory"
setwd("./Weather Data")
getwd()
# Read data
#row.names = 1 => otherwise, R will see the first column with the row titles as a separate column
#we don't want that, we want the first column as row titles ((row names) and this can be achieved by adding row.names = 1)
Chicago <- read.csv("Chicago-F.csv", row.names=1)
Chicago
Houston <- read.csv("Houston-F.csv", row.names=1)
Houston
New_York <- read.csv("NewYork-F.csv", row.names=1)
New_York
San_Francisco <- read.csv("SanFrancisco-F.csv", row.names=1)
San_Francisco
#these are data frames
is.data.frame(Chicago)
#convert the data frames to matrices
Chicago <- as.matrix(Chicago)
Houston <- as.matrix(Houston)
New_York <- as.matrix(New_York)
San_Francisco <- as.matrix(San_Francisco)
#put all these matrices into a list
Weather <- list(Chicago=Chicago, New_York=New_York, Houston=Houston, San_Francisco=San_Francisco)
Weather
Weather[3]  # returns (the ocmponent in the form of) a list
Weather[[3]]  #returns a component (not in a list)
Weather$Houston   #returns a component (not in a lost), like the [[]]
# using apply()
Chicago
apply(Chicago, 1, mean)
#check
mean(Chicago["DaysWithPrecip",])
# Analyse 1 city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
# It doesn't make sense, but just for practice:
apply(Chicago, 2, max)
apply(Chicago, 2, min)
# Compare
apply(Chicago, 1, mean)
apply(New_York, 1, mean)
apply(Houston, 1, mean)
apply(San_Francisco, 1, mean)
getwd()
#longer method to set working directory
#setwd("/home/sonia/Desktop/R/R_Advanced/Weather Data")
#shorter method to set wd => . (dot) means "current directory"
setwd("./Weather Data")
#longer method to set working directory
#setwd("/home/sonia/Desktop/R/R_Advanced/Weather Data")
#shorter method to set wd => . (dot) means "current directory"
setwd("./Desktop/R/R Advanced/Weather Data")
#longer method to set working directory
#setwd("/home/sonia/Desktop/R/R_Advanced/Weather Data")
#shorter method to set wd => . (dot) means "current directory"
setwd("./Desktop/R/R_Advanced/Weather Data")
getwd()
Chicago <- read.csv("Chicago-F.csv", row.names=1)
Chicago
Houston <- read.csv("Houston-F.csv", row.names=1)
Houston
New_York <- read.csv("NewYork-F.csv", row.names=1)
New_York
San_Francisco <- read.csv("SanFrancisco-F.csv", row.names=1)
San_Francisco
#these are data frames
is.data.frame(Chicago)
#convert the data frames to matrices
Chicago <- as.matrix(Chicago)
Houston <- as.matrix(Houston)
New_York <- as.matrix(New_York)
San_Francisco <- as.matrix(San_Francisco)
#put all these matrices into a list
Weather <- list(Chicago=Chicago, New_York=New_York, Houston=Houston, San_Francisco=San_Francisco)
Weather
Weather[3]  # returns (the ocmponent in the form of) a list
Weather[[3]]  #returns a component (not in a list)
Weather$Houston   #returns a component (not in a lost), like the [[]]
# using apply()
Chicago
apply(Chicago, 1, mean)
#check
mean(Chicago["DaysWithPrecip",])
# Analyse 1 city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
# It doesn't make sense, but just for practice:
apply(Chicago, 2, max)
apply(Chicago, 2, min)
# Compare
apply(Chicago, 1, mean)
apply(New_York, 1, mean)
apply(Houston, 1, mean)
apply(San_Francisco, 1, mean)
Chicago
# FInd the mean of every row
# 1. via loops
# first create a vector to put the output in and fill it with NULL
output <- NULL  #preparing an empty vector
for (i in 1:nrow(Chicago)){
output[i] <- mean(Chicago[i,])
}
output
names(output) <- rownames(Chicago)
output
#v 2. via apply function
apply(Chicago, 1, mean)
# Using lapply()
Chicago
t(Chicago)
Weather
# we want to apply the transpose function to all the elements of the Weather list and put them back into a list
lapply(Weather, t)
myNewList <- lapply(Weather, t)
myNewList
# example2
Chicago
rbind(Chicago, NewRow=1:12)
lapply(Weather, rbind, NewRow=1:12)
# example 3
rowMeans(Chicago)
apply(Chicago, 1, mean)
lapply(Weather, rowMeans)
# Combining lapply with the [] operator
Weather
Weather$Chicago[1,1]
Weather[[1]][1,1]
# if we want to extract the average high of January for all cities:
lapply(Weather, "[", 1,1)
Weather
# if we want the 1st row of each city
lapply(Weather, "[", 1,)
# create a list which contains all the metrics per city but only for March
lapply(Weather, "[", , 3)
# Add our own functions
lapply(Weather, rowMeans)
lapply(Weather, function(x) x[1,])
lapply(Waether, function(x) x[5,])
lapply(Weather, function(x) x[,12])
lapply(Weather, function(z) z[1,] - z[2,])
lapply(Weather, function(z) ((z[1,] - z[2,])/z[2,])*100)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100, 2)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100, 2))
lapply(Weather, function(z) ((z[1,] - z[2,])/z[2,])*100)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100),2)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100))
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100);2)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100),2)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100))
?round
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100), digits=2)
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100) & "%")
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100) + "%")
lapply(Weather, function(z) round(((z[1,] - z[2,])/z[2,])*100))
lapply(Weather, function(x) x[5,])
Weather
lapply(Weather, function(x) x["AvgPrecip_inch",]/x["DaysWithPrecip"])
lapply(Weather, function(x) x["AvgPrecip_inch",]/x["DaysWithPrecip",])
lapply(Weather, function(x) round(x["AvgPrecip_inch",]/x["DaysWithPrecip",],2))
# Using sapply
Weather
# AvgHigh for July
sapply(Weather, "[", , 7)
# AvgHigh for July
lapply(Weather, "[", , 7)
# AvgHigh for July
lapply(Weather, "[", 1,7)
Sapply(Weather, "[", 1,7)
sapply(Weather, "[", 1,7)
#AvgHigh for the 4th quarter
lapply(Weather, "[", 1,10:12)
sapply(Weather, "[", 1, 10:12)
# Another example
lapply(Weather, rowMeans)
sapply(Weather, rowMeans)
round(sapply(Weather, rowMeans))
round(sapply(Weather, rowMeans),2)
# Another example
lapply(Weather, function(x) round(x[1,] - x[2]/x[2], 2))
# Another example
lapply(Weather, function(x) round(x[1,] - x[2,]/x[2,], 2))
# Another example
lapply(Weather, function(x) round((x[1,] - x[2,])/x[2,], 2))
# Another example
lapply(Weather, function(x) round((x[1,] - x[2,])/x[2,]*100, 2))
sapply(Weather, function(x) round((x[1,] - x[2,])/x[2,]*100, 2))
# By the way: to show that spally() is a simplified version of lapply()
sapply(Weather, rowMeans)
# By the way: to show that spally() is a simplified version of lapply()
sapply(Weather, rowMeans, simplified=F)
# By the way: to show that spally() is a simplified version of lapply()
sapply(Weather, rowMeans, simplified=FALSE)
# By the way: to show that spally() is a simplified version of lapply()
sapply(Weather, rowMeans, simplify=F)
lapply(Weather, rowMeans)
# Nesting apply functions
Chicago
# Nesting apply functions
Weather
lapply(Weather, rowMeans)
lapply(Weather, max)
lapply(Weather, min)
Chicago
apply(Chicago, 1, max)
# apply across whole list
lapply(Weather, apply(Chicago), 1, max)
# apply across whole list
lapply(Weather, apply, 1, max)
laaply(Weather, function(x) apply(x, 1, max))
lapply(Weather, function(x) apply(x, 1, max))
# Tidy up
sapply(Weather, apply, 1, max)
sapply(Weather, apply, 1, min)
# which.max
Chicago
Chicago[1,]
which.max(Chicago[1,])
names(which.max(Chicago[1,]))
# we need this for all rows and all cities
# we will have apply() to iterate over rows of the matrix
# and we will have lapply() or sapply() to iterate over the components of the list
apply(Chicago, 1, function(x) names(which.max(x)))
lapply(Weather, apply, function(y) apply(y, 1, function(x) names(which.max(x))))
lapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
sapply(Weather, function(y), apply(y, 1, function(x) names(which.max(x))))
sapply(Weather, function(y) apply(y, 1, function(x) names(which.max(x))))
